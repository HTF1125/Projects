from typing import Optional
import numpy as np
import pandas as pd
from app import database, core

from typing import List


class Universe:
    UNIVERSE = {
        "UsSectors": [
            "XLC",
            "XLY",
            "XLP",
            "XLE",
            "XLF",
            "XLV",
            "XLI",
            "XLB",
            "XLK",
            "XLU",
            "XLRE",
        ],
        "GlobalAllo": [
            "SPY",
            "AGG",
            "TLT",
            "GSG",
            "TIP",
            "IVV",
            "GLD",
        ],
        "S&P500": [
            "A",
            "AAL",
            "AAPL",
            "ABBV",
            "ABNB",
            "ABT",
            "ACGL",
            "ACN",
            "ADBE",
            "ADI",
            "ADM",
            "ADP",
            "ADSK",
            "AEE",
            "AEP",
            "AES",
            "AFL",
            "AIG",
            "AIZ",
            "AJG",
            "AKAM",
            "ALB",
            "ALGN",
            "ALK",
            "ALL",
            "ALLE",
            "AMAT",
            "AMCR",
            "AMD",
            "AME",
            "AMGN",
            "AMP",
            "AMT",
            "AMZN",
            "ANET",
            "ANSS",
            "AON",
            "AOS",
            "APA",
            "APD",
            "APH",
            "APTV",
            "ARE",
            "ATO",
            "AVB",
            "AVGO",
            "AVY",
            "AWK",
            "AXON",
            "AXP",
            "AZO",
            "BA",
            "BAC",
            "BALL",
            "BAX",
            "BBWI",
            "BBY",
            "BDX",
            "BEN",
            "BF.B",
            "BG",
            "BIIB",
            "BIO",
            "BK",
            "BKNG",
            "BKR",
            "BLK",
            "BMY",
            "BR",
            "BRK.B",
            "BRO",
            "BSX",
            "BWA",
            "BX",
            "BXP",
            "C",
            "CAG",
            "CAH",
            "CARR",
            "CAT",
            "CB",
            "CBOE",
            "CBRE",
            "CCI",
            "CCL",
            "CDAY",
            "CDNS",
            "CDW",
            "CE",
            "CEG",
            "CF",
            "CFG",
            "CHD",
            "CHRW",
            "CHTR",
            "CI",
            "CINF",
            "CL",
            "CLX",
            "CMA",
            "CMCSA",
            "CME",
            "CMG",
            "CMI",
            "CMS",
            "CNC",
            "CNP",
            "COF",
            "COO",
            "COP",
            "COR",
            "COST",
            "CPB",
            "CPRT",
            "CPT",
            "CRL",
            "CRM",
            "CSCO",
            "CSGP",
            "CSX",
            "CTAS",
            "CTLT",
            "CTRA",
            "CTSH",
            "CTVA",
            "CVS",
            "CVX",
            "CZR",
            "D",
            "DAL",
            "DD",
            "DE",
            "DFS",
            "DG",
            "DGX",
            "DHI",
            "DHR",
            "DIS",
            "DLR",
            "DLTR",
            "DOV",
            "DOW",
            "DPZ",
            "DRI",
            "DTE",
            "DUK",
            "DVA",
            "DVN",
            "DXCM",
            "EA",
            "EBAY",
            "ECL",
            "ED",
            "EFX",
            "EG",
            "EIX",
            "EL",
            "ELV",
            "EMN",
            "EMR",
            "ENPH",
            "EOG",
            "EPAM",
            "EQIX",
            "EQR",
            "EQT",
            "ES",
            "ESS",
            "ETN",
            "ETR",
            "ETSY",
            "EVRG",
            "EW",
            "EXC",
            "EXPD",
            "EXPE",
            "EXR",
            "F",
            "FANG",
            "FAST",
            "FCX",
            "FDS",
            "FDX",
            "FE",
            "FFIV",
            "FI",
            "FICO",
            "FIS",
            "FITB",
            "FLT",
            "FMC",
            "FOX",
            "FOXA",
            "FRT",
            "FSLR",
            "FTNT",
            "FTV",
            "GD",
            "GE",
            "GEHC",
            "GEN",
            "GILD",
            "GIS",
            "GL",
            "GLW",
            "GM",
            "GNRC",
            "GOOG",
            "GOOGL",
            "GPC",
            "GPN",
            "GRMN",
            "GS",
            "GWW",
            "HAL",
            "HAS",
            "HBAN",
            "HCA",
            "HD",
            "HES",
            "HIG",
            "HII",
            "HLT",
            "HOLX",
            "HON",
            "HPE",
            "HPQ",
            "HRL",
            "HSIC",
            "HST",
            "HSY",
            "HUBB",
            "HUM",
            "HWM",
            "IBM",
            "ICE",
            "IDXX",
            "IEX",
            "IFF",
            "ILMN",
            "INCY",
            "INTC",
            "INTU",
            "INVH",
            "IP",
            "IPG",
            "IQV",
            "IR",
            "IRM",
            "ISRG",
            "IT",
            "ITW",
            "IVZ",
            "J",
            "JBHT",
            "JCI",
            "JKHY",
            "JNJ",
            "JNPR",
            "JPM",
            "K",
            "KDP",
            "KEY",
            "KEYS",
            "KHC",
            "KIM",
            "KLAC",
            "KMB",
            "KMI",
            "KMX",
            "KO",
            "KR",
            "KVUE",
            "L",
            "LDOS",
            "LEN",
            "LH",
            "LHX",
            "LIN",
            "LKQ",
            "LLY",
            "LMT",
            "LNT",
            "LOW",
            "LRCX",
            "LULU",
            "LUV",
            "LVS",
            "LW",
            "LYB",
            "LYV",
            "MA",
            "MAA",
            "MAR",
            "MAS",
            "MCD",
            "MCHP",
            "MCK",
            "MCO",
            "MDLZ",
            "MDT",
            "MET",
            "META",
            "MGM",
            "MHK",
            "MKC",
            "MKTX",
            "MLM",
            "MMC",
            "MMM",
            "MNST",
            "MO",
            "MOH",
            "MOS",
            "MPC",
            "MPWR",
            "MRK",
            "MRNA",
            "MRO",
            "MS",
            "MSCI",
            "MSFT",
            "MSI",
            "MTB",
            "MTCH",
            "MTD",
            "MU",
            "NCLH",
            "NDAQ",
            "NDSN",
            "NEE",
            "NEM",
            "NFLX",
            "NI",
            "NKE",
            "NOC",
            "NOW",
            "NRG",
            "NSC",
            "NTAP",
            "NTRS",
            "NUE",
            "NVDA",
            "NVR",
            "NWS",
            "NWSA",
            "NXPI",
            "O",
            "ODFL",
            "OKE",
            "OMC",
            "ON",
            "ORCL",
            "ORLY",
            "OTIS",
            "OXY",
            "PANW",
            "PARA",
            "PAYC",
            "PAYX",
            "PCAR",
            "PCG",
            "PEAK",
            "PEG",
            "PEP",
            "PFE",
            "PFG",
            "PG",
            "PGR",
            "PH",
            "PHM",
            "PKG",
            "PLD",
            "PM",
            "PNC",
            "PNR",
            "PNW",
            "PODD",
            "POOL",
            "PPG",
            "PPL",
            "PRU",
            "PSA",
            "PSX",
            "PTC",
            "PWR",
            "PXD",
            "PYPL",
            "QCOM",
            "QRVO",
            "RCL",
            "REG",
            "REGN",
            "RF",
            "RHI",
            "RJF",
            "RL",
            "RMD",
            "ROK",
            "ROL",
            "ROP",
            "ROST",
            "RSG",
            "RTX",
            "RVTY",
            "SBAC",
            "SBUX",
            "SCHW",
            "SEDG",
            "SEE",
            "SHW",
            "SJM",
            "SLB",
            "SNA",
            "SNPS",
            "SO",
            "SPG",
            "SPGI",
            "SRE",
            "STE",
            "STLD",
            "STT",
            "STX",
            "STZ",
            "SWK",
            "SWKS",
            "SYF",
            "SYK",
            "SYY",
            "T",
            "TAP",
            "TDG",
            "TDY",
            "TECH",
            "TEL",
            "TER",
            "TFC",
            "TFX",
            "TGT",
            "TJX",
            "TMO",
            "TMUS",
            "TPR",
            "TRGP",
            "TRMB",
            "TROW",
            "TRV",
            "TSCO",
            "TSLA",
            "TSN",
            "TT",
            "TTWO",
            "TXN",
            "TXT",
            "TYL",
            "UAL",
            "UDR",
            "UHS",
            "ULTA",
            "UNH",
            "UNP",
            "UPS",
            "URI",
            "USB",
            "V",
            "VFC",
            "VICI",
            "VLO",
            "VLTO",
            "VMC",
            "VRSK",
            "VRSN",
            "VRTX",
            "VTR",
            "VTRS",
            "VZ",
            "WAB",
            "WAT",
            "WBA",
            "WBD",
            "WDC",
            "WEC",
            "WELL",
            "WFC",
            "WHR",
            "WM",
            "WMB",
            "WMT",
            "WRB",
            "WRK",
            "WST",
            "WTW",
            "WY",
            "WYNN",
            "XEL",
            "XOM",
            "XRAY",
            "XYL",
            "YUM",
            "ZBH",
            "ZBRA",
            "ZION",
            "ZTS",
        ],
    }

    @classmethod
    def from_code(cls, code: str) -> "Universe":
        return cls(cls.UNIVERSE[code])

    def __init__(self, assets: List[str]) -> None:
        self.assets = sorted(assets)

    def get_prices(self, date: Optional[pd.Timestamp] = None) -> pd.DataFrame:
        """
        Retrieve and cache historical prices of the specified tickers.

        Returns:
            pd.DataFrame: A DataFrame containing historical prices for the tickers.
        """
        prices = database.get_prices(tickers=", ".join(self.assets))
        if date is not None:
            prices = prices.loc[:date]
        return prices

    def get_volumes(self, date: Optional[pd.Timestamp] = None) -> pd.DataFrame:
        """
        Retrieve and cache historical prices of the specified tickers.

        Returns:
            pd.DataFrame: A DataFrame containing historical prices for the tickers.
        """
        volumes = database.get_volumes(tickers=", ".join(self.assets))
        if date is not None:
            volumes = volumes.loc[:date]
        return volumes

    def expectation(
        self,
        date: Optional[pd.Timestamp] = None,
    ) -> pd.Series:
        return core.log_return(self.get_prices(date=date)).mean() * 252

    def covariance(
        self,
        window: int = 252 * 3,
        date: Optional[pd.Timestamp] = None,
    ) -> pd.DataFrame:
        return core.log_return(self.get_prices(date=date).iloc[-window:]).cov() * 252

    def correlation(
        self,
        window: int = 252 * 3,
        date: Optional[pd.Timestamp] = None,
    ) -> pd.DataFrame:
        return core.log_return(self.get_prices(date=date).iloc[-window:]).corr()

    def solve(
        self,
        risk_free: float = 0.0,
        min_weight: float = 0.0,
        max_weight: float = 1.0,
        sum_weight: float = 1.0,
    ):
        from scipy.optimize import minimize

        constratins = [
            {"type": "ineq", "fun": lambda w: w - min_weight},
            {"type": "ineq", "fun": lambda w: max_weight - w},
            {"type": "eq", "fun": lambda w: np.sum(w) - sum_weight},
        ]

        x0 = np.ones(len(self.assets)) / len(self.assets)

        problem = minimize(
            fun=lambda x: self.expectation().dot(x),
            x0=x0,
            method="SLSQP",
            constraints=constratins,
        )
        if problem.success:
            data = problem.x + 1e-16
            w = pd.Series(data=data, index=self.assets, name="weights")
            return w.round(6)
        return pd.Series({})
